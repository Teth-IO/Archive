+-------------------------------------------------------------------------+
|=----------------------=[ Ultimate Home Routeur ]=----------------------=|
|-------------------------------------------------------------------------|
|=---------------=[ WG, dnscrypt, hardware acceleration  ]=--------------=|
+-------------------------------------------------------------------------+

--[ Table of contents

0 - introduction
1 - installation
2 - irqbalance
3 - Hardware Flow Offloading
4 - Wireless Ethernet Dispatch
5 - Wifi
6 - recup ipv6
	6.1 - wan6
	6.2 - lan
	6.3 - Routage statique pour ipv6
7 - wireguard
8 - dnscrypt-proxy
9 - config RPC pour homepage
10 - snort inline - WIP

--[ 0 - Introduction

Home routeur avec les fonctionnalités suivantes
	* WAN & LAN 2.5GBASE-T 	
	* WLAN 802.11ax (wifi 6)
	* DHCPv4 & v6
	* snort en inline (IPS)
	* server wireguard
	* hardware acceleration LAN et WLAN
	* irqbalance
	* dnscrypt-proxy avec redirection de port le forcer
	
Hardware
	* GL-MT6000
		* WAN 2.5Gbps
		* LAN 1 2.5Gbps 4 1Gbps
		* dual-band 4×4 WiFi 6
		* 1GB DDR4 RAM


--[ 1 - Installation 

https://openwrt.org/toh/gl.inet/gl-mt6000
custom build utilise ici https://github.com/pesa1234/MT6000_cust_build/tree/main
flash le routeur avec l'image sysupgrade depuis l'interface web de l'OEM

pour l'install standard (pas le build cutsom) pas d'interface web, l'installer avec :
se co en ssh root@192.168.1.1 and: 
apk update && apk install luci luci-lib-px5g px5g-standalone

puis pour upgrader les co en http vers https :

uci set uhttpd.main.redirect_https=1     # 1 to enable redirect, 0 to disable redirect
uci commit uhttpd
service uhttpd reload

--[ 2 - irqbalance

déjà installer par l'image custom
a activer sous LuCI

sinon 
apk add irqbalance luci-app-irqbalance

--[ 3 - Hardware Flow Offloading & Wireless Ethernet Dispatch
(attention : le flow offloading n'est pas compatible avec le Smart Queue Management (SQM) pour contrer les bufferbloat)

LuCI :
Network → Firewall → Routing/NAT Offloading -> Flow offloading type
Save and Apply

par SSH pour l'image standard (pas dans LuCI): 

vim /etc/modules.conf
# append :
options mt7915e wed_enable=Y
	
Save and Reboot

# vérification

cat /sys/module/mt7915e/parameters/wed_enable

# reinstall : Luci ne veut pas le valider

--[ 5 - Wifi

In LuCI go to Network → Wireless
# Device general setup
mode AX channel auto width max
enable iBF
Select your “Country Code” from the dropdown

# Inerface general setup
ESSID & network
disable WMM

# wireless security
wpa3-sae semble ok

--[ 6 - recup ipv6
https://openwrt.org/fr/docs/guide-user/network/ipv6/freebox
https://blog.kulakowski.fr/post/openwrt-derriere-une-freebox-ipv6-dmz-et-bridge
https://lafibre.info/remplacer-freebox/freebox-delta-pop-mode-bridge-onpsense-freeplayer/
=> Même si le mode bridge est activé, la freebox reste un routeur IPv6, sur lequel il faudra configurer un NextOP (“le routeur suivant”) depuis son interface. 
-> cette adresse ipv6 n'est pas la default gateway a utilisé

----[ 6.1 - wan6

sur la freebox mettre en next-hop l'adresse de lien locale de l'interface wan6 d'openwrt (attention a ne pas se tomper d'eth)
sur OpenWRT mettre le prefix routé IPv6 (pas dispo sur l'interface web de base) :

aller dans network, interfaces, wan6, cliquer sur edit.
General Settings, Protocol, mettre Static adress puis cliquer sur switch protocol.
mettre IPv6 assignment length sur disabled.
mettre IPv6 adress à 2a01:xxxx:xxxx:xxxx::2 (la Freebox se mettra d'elle même en 2a01:xxxx:xxxx:xxxx::1)
mettre gateway avec l'adresse de lien IPv6 de la freebox de type fe80::xxxx:xxxx:xxxx:xxxx.
mettre l'IPv6 routed prefix 2a01:xxxx:xxxx:xxxx::/64
valider.

l'interface wan6 n'a aucune ipv6 publique et aucune gateway, seule l'IPv6-PD est du coup remplie

----[ 6.2 - lan

Advanced Settingd :
	IPv6 assignment length : 64
	IPv6 prefix filter : wan6
	IPv6 suffix : suffix a donner a l'interace
    # normelament osef
DHCP server :
	Advanced settings :
		DHCP-Options : 6,192.168.1.1 -> dnscrypt-proxy
	IPv6 settings :
		RAd-Service : server mode
		DHCPv6-Service : server mode.
		Announced IPv6 DNS servers : vide -> se présente lui-même -> dnscrypt-proxy
		NDP-Proxy : disabled
	IPv6 RA Settings :
		default router : forced

----[ 6.3 - Routage statique pour ipv6

wan6 -> ::/0 -> adresse de lien locale freebox

=> routage static wan6 vers local link freebox

--[ 7 - wireguard
https://openwrt.org/docs/guide-user/services/vpn/wireguard/server

# pour l'image standard
## Preparation

Install the required packages. Specify configuration parameters for VPN server.

# Install packages
apk update
apk add wireguard-tools luci-proto-wireguard qrencode

# interfaces
general settings :
    protocol : WireGuard VPN
    générer une pair de clefs
    port : 51820
    addresses : 192.168.9.1/24
Firewall settings :
    assigné en lan

Configure VPN interface and peers.

# règle de pare-feu
autoriser port 51820 depuis wan

# peer
créer une pair de clefs
remplir allowed IPs avec une ip sur 192.168.9.1/24
cocher route alloed IPs

# coté client
mettre en addresse l'ip de allowed IPs
dns = 192.168.1.1

--[ 8 - DNScrypt-proxy

https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-on-OpenWrt

# install
apk update
apk add dnscrypt-proxy2
uci add_list dhcp.@dnsmasq[0].server='127.0.0.53'
uci commit dhcp
/etc/init.d/dnsmasq restart

-> ajouter aussi un forward '::53'

# config, que doh pour l'ECH (ne marche pas sous odoh)
# edit /etc/dnscrypt-proxy2/dnscrypt-proxy.toml
------
...
listen_address = ['127.0.0.53:53', '[::53]:53']
...
ipv6_servers = true
dnscrypt_servers = false
doh_servers = true
odoh_servers = false
require_dnssec = true
... nolog, nofilter
------

# edit /etc/config/dhcp
config dnsmasq
    # Ignore ISP's DNS by not reading upstream servers from /etc/resolv.conf
    option noresolv '1'
    # Ensures that /etc/resolv.conf directs local system processes to use dnsmasq and hence dnscrypt-proxy
    option localuse '1'
    # Disable dnsmasq cache because we don't want to cache twice and the dnscrypt-proxy cache is superior
    option cachesize '0'

# verif /etc/config/network interface wan a option peerdns '0'

# redirection de port pour forcer tout le traffic dns vers dnscrypt-proxy
# add to /etc/config/firewall
config redirect
    option name 'Divert-DNS, port 53'
    option src 'lan'
    option dest 'lan'
    option src_dport '53'
    option dest_port '53'
    option target 'DNAT'

/etc/init.d/dnscrypt-proxy restart

# test d'ECH :
https://defo.ie/ech-check.php
https://tls-ech.dev/

restart 
# test l'ipv6 vers dnscrypt

--[ record dns

config domain
        option name 'homepage.lan'
        option ip '192.168.1.200'

config domain
        option name 'searxng.lan'
        option ip '192.168.1.200'

config domain
        option name 'owncloud.lan'
        option ip '192.168.1.200'

config domain
        option name 'mytube.lan'
        option ip '192.168.1.200'

config domain
        option name 'paperless.lan'
        option ip '192.168.1.200'

config domain
        option name 'calibre.lan'
        option ip '192.168.1.200'

config domain
        option name 'jellyfin.lan'
        option ip '192.168.1.200'

--[ config RPG pour homepage

apk update
apk add uhttpd-mod-ubus
cat << EOF > /usr/share/rpcd/acl.d/homepage.json
{
  "homepage": {
    "description": "Homepage widget",
    "read": {
      "ubus": {
        "network.interface.wan": ["status"],
        "network.interface.lan": ["status"],
        "network.device": ["status"],
        "system": ["info"]
      }
    }
  }
}
EOF

# hash du mdp utlisé par homepage
uhttpd -m "password"

# à ajouter dans /etc/config/rpcd
config login
        option username 'homepage'
        option password 'hashdupassword'
        list read homepage

----------------------------- WIP -----------------------------

--[ 10 - snort inline - WIP : bloque pas, crash avec les community rules

https://openwrt.org/docs/guide-user/services/snort

apk update
apk install snort3 wget-ssl coreutils-sort

uci set snort.snort.enabled=1
uci set snort.snort.manual=0
uci set snort.snort.home_net="any"
uci set snort.snort.interface="$(uci get network.wan.device)"

# ips mode
uci set snort.snort.mode="ips"
uci set snort.snort.action="block"
(afpacket ?)
uci commit

# community rules
snort-rules
/etc/init.d/snort restart

# testing rules (logging icmp)
snort-rules --testing
/etc/init.d/snort restart

=> snort ne block rien en testing
=> not running avec les community rules, running en testing


+-[ EOF ]=----------------------------------------------------------------+
