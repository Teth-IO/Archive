clang vs gcc hardened -> https://lwn.net/Articles/798913/ & https://developers.redhat.com/articles/2022/06/02/use-compiler-flags-stack-protection-gcc-and-clang
---------------------
most of the "old-school" security features have long since been supported by both compilers. 
These include stack canaries, warnings on unsafe format-string use, and more.
Les nouvelles features de sécurité :
# supporter par les deux :
-ffunction-sections -> put each function into its own ELF section (fine-grained address-space layout randomization)
-Wimplicit-fallthrough -> protection contre Implicit fall-through behavior in switch statements
-mshstk -> shadow stack
-fstack-protector-strong -> stack canary
-D_FORTIFY_SOURCE=3 -> Fortified source
-fcf-protection=full -> CFI
# GCC only
-fstack-clash-protection -> Stack probing, more useful in user space than in the kernel car il a éliminer l4utilisation des variable-length arrays
nettoyage des caller-saved registers -> par un patch
automatically initializing stack variables on function entry -> par un plugin
structure layout randomization -> par un plugin
	=> plugin dans "General architecture-dependent options" du kernel ? 
# CLANG Only
-mspeculative-load-hardening -> mitigation contre spectre v1 (la mitigation peux étre implémenté d'autre façon (grep . /sys/devices/system/cpu/vulnerabilities/*))
-fsanitize=cfi -> software implementation of control flow integrity (en cas de manque de non support par le hardware)

# GCC :
	# GCC hardened a en built-in : (vérifier avec gcc -Q --help=common)
CFLAGS/CXXFLAGS				LDFLAGS				function

-D_FORTIFY_SOURCE=3							run-time buffer overflow detection
-D_GLIBCXX_ASSERTIONS							run-time bounds checking for C++ strings and containers
-fstack-protector-strong						stack smashing protector (SSP) - best stack canary coverage - en all rsque de tout casser
-fstack-clash-protection						increased reliability of stack overflow detection
-fcf-protection=full							control flow integrity protection
					-Wl,-z,defs			detect and reject underlinking
					-Wl,-z,now			disable lazy binding
					-Wl,-z,relro			read-only segments after relocation
-fpie					-Wl,-pie			full ASLR for executables
-fpic -shared								no text relocations for shared libraries
