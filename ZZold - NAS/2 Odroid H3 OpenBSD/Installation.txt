# 0. utils
# 1. network
# 2. ssh
# 3. Packet Filtering 
# 4. updates
# 5. RAID1 setup
# 6. nextcloud
# 7. SERVER CERTIFICATES
# 8. httpd
# 9. PHP
# 10. PostgreSQL
# 11. Redis
# 12. cronjob
# 13. chroot
# 14. montage du RAID
# 15. web install nextcloud 
# 16. SMART
# 17. Incremential backup
# 18. network bridge
# 19. vm alpine linux
# 20. install docker
# 21. reverse-proxy
# 22. Packet Fileting avec bridge et tap 
# 23. administration
# note : client-side encryption

# 0. utils :
------------
pkg_add vim htop wget neofetch

# 1. network :
--------------
https://www.openbsd.org/faq/faq6.html

/etc/hostname.if
# ip inet et inet6 en static

/etc/mygate
#mettre route inet et inet6

#dns
cat << EOF > /etc/dhcpleased.conf
interface bse0 {
	ignore dns
}

cat << EOF > /etc/resolv.conf 
nameserver 2606:4700:4700::1111
nameserver 1.1.1.1
EOF

# 2. ssh :
----------

ssh-keygen -t ed25519 -o -a 100
cat ~/.ssh/id_ed25519.pub > ~/.ssh/authorized_keys

# 3. Packet Filtering :
-----------------------
https://www.openbsd.org/faq/pf/filter.html

cat << EOF > /etc/pf.conf
set block-policy drop
set skip on lo
block in on egress
pass out on egress
pass in proto tcp from #LAN to port ssh
pass in proto icmp from #LAN
pass in proto tcp from #LAN to port https
EOF
# remplacer #LAN par l'adresse du reseau a autoriser

# 4. updates :
-------------- 

# release model :
# en stable faire syspatch pour maj la release
# en current faire sysupgrade pour passer a la dernière snapshot de la release
# sysupgrade -s pour passer en -current 

# phases de mise à jour :
# le systeme = syspatch ou sysupgrade
# /etc = sysmerge
# les paquets = pkg_add -iu

# 5. RAID :
-----------
https://www.openbsd.org/faq/faq14.html

# disklabel sd0 et sd1
disklabel -E sd0
sd0> a a
offset: [0]
size: [XXXXX] *
FS type: [4.2BSD] RAID
sd0*> w
sd0> q
disklabel -E sd1
sd1> a a
offset: [0]
size: [XXXXX] *
FS type: [4.2BSD] RAID
sd1*> w
sd1> q

# RAID1
bioctl -c 1 -l sd0a,sd1a softraid0

# disklabel du RAID
# on crée ici une partition n pour nextcloud(15) et une deuxième, d, pour le backups incrementielles(22) des datas
disklabel -E sd3
sd3> a n
offset: [0]
size: [XXXXX] XXXXX/2
FS type: [4.2BSD]
sd3> a d
offset: *
size: [XXXXX] *
sd3*> w
sd3> q 

# newfs
newfs /dev/rsd3n
newfs /dev/rsd3d

# pour voir le status du RAID $ bioctl sd3

# 6. nextcloud :
----------------
-> https://docs.nextcloud.com/server/latest/admin_manual/installation/example_openbsd.html
=> /usr/local/share/doc/pkg-readmes/nextcloud

pkg_add nextcloud
# prendre la derniere version 

pkg_add postgresql-server redis pecl74-redis php-pdo_pgsql
# pour php-pdo_pgsql prendre le paquet en 8.2 (php 8.3 n'a pas tout les modules requis atm)

# 7. SERVER CERTIFICATES :
--------------------------
https://man.openbsd.org/ssl

openssl genrsa -out /etc/ssl/private/server.key 4096
openssl req -new -key /etc/ssl/private/server.key \
  -out /etc/ssl/private/server.csr
openssl x509 -sha256 -req -days 365 \
  -in /etc/ssl/private/server.csr \
  -signkey /etc/ssl/private/server.key \
  -out /etc/ssl/server.crt

# 8. httpd :
------------

# fichier httpd.conf -> /etc/httpd.conf

rcctl enable httpd
rcctl start httpd

# 9. php 8.2 :
--------------
=> 8.3 n'a pas tout les modules'

vim /etc/php-8.2.ini
	[opcache]
	opcache.enable=1
	opcache.enable_cli=1
	opcache.memory_consumption=512
	opcache.interned_strings_buffer=8
	opcache.max_accelerated_files=10000
	opcache.revalidate_freq=1
	opcache.save_comments=1
	
	post_max_size = 513M
	upload_max_filesize = 513M
	
	memory_limit = 512MB

cp /etc/php-8.2.sample/* /etc/php-8.2

rcctl enable php82_fpm
rcctl start php82_fpm

# 10. PostgreSQL :
------------------

su - _postgresql
mkdir /var/postgresql/data
initdb -D /var/postgresql/data -U postgres -A md5 -E UTF8 -W
# saisir le mot de passe de la nouvelle db
pg_ctl -D /var/postgresql/data -l logfile start
exit

rcctl enable postgresql
rcctl start postgresql

# 11. Redis :
-------------

rcctl enable redis
rcctl start redis
vim /var/www/nextcloud/config/config.php
	...
	'filelocking.enabled' => true,
	'memcache.local' => '\OC\Memcache\Redis',
	'memcache.locking' => '\OC\Memcache\Redis',
	'redis' => array(
		'host' => 'localhost',
		'port' => 6379,
		'timeout' => 0.0,
	),

# le fichier doit debuter par <?php (pas par defaut ?)

# 12. cronjob :
---------------

crontab -e
*/15    *       *       *       *       su -m www -c "/usr/local/bin/php-8.2 -f /var/www/nextcloud/cron.php"

# 13. chroot :
--------------
# par defaut le web serveur est dans un chroot 
# /var/www/ = /

mkdir -p /var/www/etc/ssl
install -m 444 -o root -g bin /etc/ssl/cert.pem /etc/ssl/openssl.cnf \
      /var/www/etc/ssl/
cp /etc/resolv.conf /var/www/etc

# 14. montage du RAID :
-----------------------

mount /dev/sd3n /var/www/nextcloud/data
mkdir /mnt/backup
mount /dev/sd3d /mnt/backup
vim /etc/fstab
	/dev/sd3n /var/www/nextcloud/data ffs rw,nodev,nosuid 1 2
	/dev/sd3d /mnt/backup ffs rw,nodev,nosuid 1 2
chown www data

# 15. install :
---------------

touch /var/www/nextcloud/config/CAN_INSTALL

# se connecter en https au serveur
# se connecter a la db PostgreSQL
(utilisateur postgres ; db postgres ; localhost:5432)

# 16. SMART :
-------------

pkg_add smartmontools
rcctl enable smartd

# pour voir les info smartctl -i /dev/sd0c
# smartd recolte les infos toutes les 30min, voir /var/log/daemon

# 17. Incremential backup :
---------------------------

pkg_add restic

# preparation du repo
restic init --repo /mnt/backup
# backup
restic -r /mnt/backup --verbose backup /var/www/nextcloud/data

# automatisation :
## auto backup
cat << EOF > restic-variables
export RESTIC_PASSWORD="YOURPASSWORDHERE"
EOF
cat << EOF > restic-backup-script
#!/bin/sh
. /root/restic-variables
/usr/local/bin/restic -r /mnt/backup backup /var/www/nextcloud/data
EOF

crontab -e
0	1	*	*	*	/root/restic-backup-script

## suppression des vieilles snapshots (retention de 30 snapshots)
cat << EOF > restic-prune-script
#!/bin/sh
. /root/restic-variables
/usr/local/bin/restic -r /mnt/backup forget --keep-last 30 --prune
EOF

crontab -e
0	2	*	*	*	/root/restic-prune-script

# note sur cron :
# log dans /var/cron/log
# l'output de la commandande est mailed (accessible par mail(1))

# 18. network bridge :
----------------------
https://www.openbsd.org/faq/pf/filter.html

# ajouter l'interface au bridge
echo 'add rge0' > /etc/hostname.bridge0
sh /etc/netstart bridge0

# 19. vm alpine linux :
-----------------------
https://www.openbsd.org/faq/faq16.html

rcctl enable vmd

# setup

mkdir /home/vm
vmctl create -s 50G /home/vm/disk.qcow2
cd /home/vm
# iso version virtual
wget https://dl-cdn.alpinelinux.org/alpine/v3.19/releases/x86_64/alpine-virt-3.19.1-x86_64.iso

# vm.conf 
cat << EOF > /etc/vm.conf
switch "my_switch" {
    interface bridge0
}

vm "alpine" {
    memory 4G
	enable
	disk /home/vm/disk.qcow2
    interface { switch "my_switch" }
}
EOF
# enable fait demarrer automatiquement la vm au demarrage du service

rcctl start vmd
vmctl show
vmctl console alpine
=> https://wiki.alpinelinux.org/wiki/Installation

mkdir .ssh
ssh-keygen -t ed25519 -o -a 100
cat ~/.ssh/id_ed25519.pub > ~/.ssh/authorized_keys

# 20. install docker :
----------------------

vi /etc/apk/repositories
-> uncomment la deuxième ligne
apk update

apk add docker git vim docker-compose
rc-update add docker default
service docker start

get docker-compose file

docker-compose up -d
  
# 21. reverse-proxy :
---------------------

apk add haproxy

openssl genrsa -out /etc/ssl/private/server.key 4096
openssl req -new -key /etc/ssl/private/server.key \
  -out /etc/ssl/private/server.csr
openssl x509 -sha256 -req -days 365 \
  -in /etc/ssl/private/server.csr \
  -signkey /etc/ssl/private/server.key \
  -out /etc/ssl/server.crt
cat /etc/ssl/server.crt /etc/ssl/private/server.key > /etc/ssl/private/ssl-certs.pem

cat << EOF > /etc/haproxy/haproxy.cfg
frontend www
  bind :443 ssl crt /etc/ssl/private/ssl-certs.pem
  default_backend searxng

backend searxng
  mode http
  server searxng 127.0.0.1:80
EOF

rc-update add haproxy default
service haproxy start

# 22. Packet Fileting avec bridge et tap :
------------------------------------------
# rappel de la topologie
    rge0 (the physical interface) groups egress
    tap0 (vm interface) groups tap member
    bridge0 groups bridge (tap0 & rge0)
# bridge et tap étant liée a l'egress on a juste besoin de filtrer celui-ci (on ne fait de filtrage pour un dialogue hote/vm)

cat << EOF > /etc/pf.conf
set block-policy drop
set skip on lo
block in on egress
pass out on egress
# necessaire ping6
pass in proto icmp6 from any to any
# admin
pass in proto tcp from #LAN to port ssh
pass in proto icmp from #LAN
# services
pass in proto tcp from #LAN to #BSD port https
pass in proto tcp from #LAN to #VM port https
EOF
# remplacer #LAN par l'adresse du reseau a autoriser

# outils d'analyse
# mettre match log (matches) dans pf.conf
tcpdump -neti pflog0 -> inspection et matching aux regles
pfctl -vvsr -> affiche les regles 

# 23. administration :
----------------------

conteneurs :
docker-compose down -v (detruit les conteneur)
docker-compose up -d (démarre les conteneurs)
# prend les latest donc maj
docker logs 'id conteneur' # logs du conteneur selectionne

alpine :
apk update
apk upgrade
reboot

stockage :
/var/log/daemon # log de smartd
bioctl sd3 # etat du RAID
mail # outpout des cron

openbsd :
pkg_add -iu # maj des paquets
sysupgrade # maj systeme

restic :
management des snapshots :
https://restic.readthedocs.io/en/latest/045_working_with_repos.html
https://restic.readthedocs.io/en/latest/040_backup.html#comparing-snapshots
restoration :
https://restic.readthedocs.io/en/latest/050_restore.html

# note : client-side encryption :
---------------------------------

gocryptfs:

    Windows: cppcryptfs
    Android: DroidFS
		-> copie local du vault avant de pouvoir l'utiliser
    Linux: gocryptfs
