Compiler and runtime stack		GCC hardened
MAC								SElinux
boot entry						efibootmgr vers UKI
Secure boot						signing by Dracut
kernel							kernel hardened (KSSP)
Init							openrc

rc-service sshd start

Préparation du disque
---------------------
fdisk /dev/sda
g
w
cfdisk
-> entrer les nouvelles partitions
-> sda1 512MB de type EFI
-> sda2 le reste en gardant le type par defaut (linux filesystems)
write

# fs
mkfs.fat -F 32 /dev/sda1
mkfs.xfs /dev/sda2

# montage
mount /dev/sda2 /mnt/gentoo
mount --mkdir /dev/sda1 /mnt/gentoo/efi
cd /mnt/gentoo

#swapfile
# taille du swap = racine carré de la RAM (en GB)
dd if=/dev/zero of=/mnt/gentoo/swapfile bs=1M count=(valeur en MiB e.g. 4096 pour 4G) status=progress
chmod 0600 /mnt/gentoo/swapfile
mkswap -U clear /mnt/gentoo/swapfile
swapon /mnt/gentoo/swapfile

Environnement
-------------
#hardened nomultilib selinux openrc 
wget https://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-hardened-nomultilib-selinux-openrc/stage3-amd64-hardened-nomultilib-selinux-openrc-20240317T170433Z.tar.xz

# unpacking
tar xpf stage3-* --xattrs-include='*.*' --numeric-owner
rm stage3-*

optimization de GCC
-------------------
nano /mnt/gentoo/etc/portage/make.conf
COMMON_FLAGS="-march=native -O2 -pipe"
# makeopts = le nombre correspond aux GB de RAM divisé par 2 (chaque job de compilation utilise environ 2G de RAM)
MAKEOPTS="-j4 -l4"
	Tout rebuild ?
	emerge -e @system (les outils)
	emerge -e @world (les app)

selection du mirroir
--------------------
# en https
mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf
mkdir --parents /mnt/gentoo/etc/portage/repos.conf
cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf

DNS
---
cp --dereference /etc/resolv.conf /mnt/gentoo/etc/

chroot
------
arch-chroot /mnt/gentoo

installation du ebuild repository
---------------------------------
emerge-webrsync

choix du profil
---------------
# no-multilib/hardened/selinux openrc
eselect profile list
eselect profile set 33

maj du @world
-------------
emerge --ask --verbose --update --deep --newuse @world

CPU_FLAGS_*
-----------
# This is used to configure the build to compile in specific assembly code or other intrinsics, usually hand-written or otherwise extra
# is not the same as asking the compiler to output optimized code for a certain CPU feature (e.g. -march=).
emerge --ask app-portage/cpuid2cpuflags
cpuid2cpuflags
echo "*/* $(cpuid2cpuflags)" > /etc/portage/package.use/00cpu-flags

VIDEO_CARDS
-----------
emerge --ask sys-apps/pciutils
emerge --ask sys-apps/hwdata
lspci | grep -i VGA 
https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#VIDEO_CARDS

Timezone
-------
echo "Europe/Paris" > /etc/timezone
emerge sys-libs/timezone-data
emerge --config sys-libs/timezone-data

Locales 
-------
vim /etc/locale.gen
fr_FR.UTF-8 UTF-8
locale-gen

firmware & microcode
--------------------
# acceptation des licences
cat << EOF > /etc/portage/package.license
# Accepting the license for linux-firmware
sys-kernel/linux-firmware linux-fw-redistributable
# Accepting any license that permits redistribution
sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE
EOF
emerge --ask sys-kernel/linux-firmware

# microcode :
# AMD est compris dans sys-kernel/linux-firmware
# pour intel :
vim /etc/portage/package.license
	sys-firmware/intel-microcode intel-ucode license(s)
emerge sys-firmware/intel-microcode

kernel
------
# UEFI + KSPP + qemu => voir pour udev, wireguard, docker, webcam
# https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Recommended_Settings
emerge --ask sys-kernel/gentoo-sources
eselect kernel list
eselect kernel set 1 (premier kernel de la liste)
ls -l /usr/src/linux (symlink)
cd /usr/src/linux
make menuconfig -> voir fichier kernel + si hôte de virtu attention aux autres options à cocher
# save en .config pour compilation, save en ***.config pour backup
make && make modules_install
make install

fstab
-----
vim /etc/fstab
tmpfs 				/tmp 	  tmpfs 	defaults,nosuid,nodev 					0 0
/dev/sda1   		/efi      vfat		defaults,noatime,noexec,nodev,nosuid,fmask=0137,dmask=0027    0 2
/dev/sda2   		/         xfs		noatime              					0 1
/swapfile 			none 	  swap 		sw  		

Hostname
--------
echo tux > /etc/hostname

Network
-------
# nmtui = NetworkManager =  udev and D-Bus
# eth
emerge --ask net-misc/dhcpcd
rc-update add dhcpcd default
# wifi
emerge --ask net-wireless/iwd
rc-update add iwd default 
rc-service iwd start 

IAM
---
passwd
useradd ***

keyboard & clock - latin 9 ?
----------------
vim /etc/conf.d/keymaps
vim /etc/conf.d/hwclock

Log
---
emerge --ask app-admin/sysklogd
rc-update add sysklogd default

SSH
---
rc-update add sshd default

Shell
-----
# bash completion pour root
emerge --ask app-shells/bash-completion

NTP
---
emerge --ask net-misc/chrony
rc-update add chronyd default

firewalld
---------
emerge  net-firewall/firewalld
rc-update add firewalld default 
rc-service firewalld start 

SELinux
-------
# configuration
FEATURES="-selinux" emerge -1 selinux-base
# par défaut en permissive strict
FEATURES="-selinux -sesandbox" emerge -1 selinux-base
FEATURES="-selinux -sesandbox" emerge -1 selinux-base-policy
emerge -uDN @world

# labeling
# des devices
mkdir /mnt/gentoo
mount -o bind / /mnt/gentoo
setfiles -r /mnt/gentoo /etc/selinux/strict/contexts/files/file_contexts /mnt/gentoo/{dev,home,proc,run,sys,tmp} 
umount /mnt/gentoo
# du swapfile
semanage fcontext -a -t swapfile_t "/swapfile" 
restorecon /swapfile
# de tout le fs (aucune relocation, a cause du profile ?)
rlpkg -a -r

# mapper un compte admin pour gérer SELinux https://wiki.gentoo.org/wiki/SELinux/Installation#Define_the_administrator_accounts
# chaque tache d'afiministration (e.g. installation) nécessite de passer par 
newrole -r sysadm_r

# pour sauvegarder les logs d'audit de SELinux il est nécessaire d'installer le paquets suivants
sys-process/audit
rc-service auditd start
rc-update add auditd default

UKI
---
# /etc/kernel/cmdline is not used when generating Unified Kernel Images with Dracut
# plugin
cat << EOF > /etc/kernel/install.conf
layout=uki
uki_generator=dracut
initrd_generator=dracut
EOF

# efi.stub
mkdir -p /etc/portage/package.use
echo "sys-apps/systemd-utils boot kernel-install" >> /etc/portage/package.use/utils
emerge --ask --oneshot --verbose sys-apps/systemd-utils

# UKI
emerge dracut
cat << EOF > /etc/dracut.conf
uefi="yes"
kernel_cmdline="root=/dev/sda2"
# kernel_cmdline+=" rd.luks.name=*UUID de /dev/sda2*=root root=/dev/mapper/root "
EOF
mkdir -p /efi/EFI/Linux
mv /boot/vmlinuz /boot/vmlinuz-6.6.21-gentoo
dracut --kver 6.6.21-gentoo /efi/EFI/Linux/gentoo-hardened.efi

# bootloader
emerge efibootmgr
efibootmgr --create --disk /dev/sda --part 1 --label "Gentoo-Hardened" --loader 'EFI\Linux\gentoo-hardened.efi'

Secure boot :
-------------
# utilisation de Dracut (resigne l'UKI a chaque maj avec sbsign)
emerge app-crypt/sbsigntools
emerge app-crypt/efitools

mkdir -p -v /etc/efikeys 
chmod -v 700 /etc/efikeys 
cd /etc/efikeys 

# backup des anciens clefs
efi-readvar -v PK -o old_PK.esl
efi-readvar -v KEK -o old_KEK.esl
efi-readvar -v db -o old_db.esl
efi-readvar -v dbx -o old_dbx.esl 

# creation des nouvelles
openssl req -new -x509 -newkey rsa:2048 -subj "/CN=tux's platform key/" -keyout PK.key -out PK.crt -days 3650 -nodes -sha256 
openssl req -new -x509 -newkey rsa:2048 -subj "/CN=tux's key-exchange-key/" -keyout KEK.key -out KEK.crt -days 3650 -nodes -sha256 
openssl req -new -x509 -newkey rsa:2048 -subj "/CN=tux's kernel-signing key/" -keyout db.key -out db.crt -days 3650 -nodes -sha256 

chmod -v 400 *.key 

# Keystore Update Files
cert-to-efi-sig-list -g "$(uuidgen)" PK.crt PK.esl
sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth 
cert-to-efi-sig-list -g "$(uuidgen)" KEK.crt KEK.esl 
sign-efi-sig-list -a -k PK.key -c PK.crt KEK KEK.esl KEK.auth 
cert-to-efi-sig-list -g "$(uuidgen)" db.crt db.esl 
sign-efi-sig-list -a -k KEK.key -c KEK.crt db db.esl db.auth 
openssl x509 -outform DER -in PK.crt -out PK.cer
openssl x509 -outform DER -in KEK.crt -out KEK.cer
openssl x509 -outform DER -in db.crt -out db.cer 
cp -v KEK.esl compound_KEK.esl
cp -v db.esl compound_db.esl
sign-efi-sig-list -k PK.key -c PK.crt KEK compound_KEK.esl compound_KEK.auth
sign-efi-sig-list -k KEK.key -c KEK.crt db compound_db.esl compound_db.auth 

=> besoin d'un hardware pour continuer

# redémmarage vers le bios et entrer en setup mode
enrollement des clefs dans l'UEFI

# signature par sbsign

Premier boot
------------
# verif du secure boot
dmesg | grep -i "secure"

# verif du microcode :
grep microcode /proc/cpuinfo
	&
dmesg | grep microcode

# voir les mitigations des vulnérabilités du cpu
grep . /sys/devices/system/cpu/vulnerabilities/*

# verif des access sur /efi (emet des warning si non conforme)
bootctl install

# signature de l'UKI par Dracut
-------------------------------
vim /etc/dracut.conf
# https://gist.github.com/Neurognostic/259f1ba1e568b31f0732a4a18f399f9e
# https://man.archlinux.org/man/dracut.conf.5
uefi_secureboot_cert=/etc/efi-keys/db.crt
uefi_secureboot_key=/etc/efi-keys/db.key

# SElinux enforcing
-------------------
# avant de passer en SELinux enforcing il passer en revue les denied operations pour gérer de nouvelles stratégie (le systeme ne peut pas booter avec les règles par défaut)
# # liste des permission sets https://selinuxproject.org/page/ObjectClassesPerms#Common_Permission_Sets
# pour passer en revue les access vector cache (AVC) denials
ausearch -m avc -ts recen
# ou directement dans le fichier de log /var/log/audit/audit.log
# pour pour une human-readable description
audit2allow -w -a
# on peut créer un policy package avec :
audit2allow -a -M 'name'
# Audit2allow creates a type enforcement (te) file in the current directory using the name given to the -M option
# audit2allow also compiles this "te" file into a policy package (.pp) ready to be installed with the semodule command
# When you install this MYPOLICY.pp, it will replace any previously install MYPOLICY.pp file
# attention donc de ne pas créer un policy package du meme nom que ceux deja present sur le systeme 
# policies location
/usr/share/selinux/strict/
# et l'activer 
semodule -i 'name'.pp
# How to Enable or Disable SELinux Boolean Values
getsebool -a
setsebool 'boolean' on|off

# passer SELinux en enforcing
vim /etc/selinux/config

=> meme avec un allow AVC dmesg et auditd ne peut pas boot
=> a voir
