+-------------------------------------------------------------------------+
|=----------------=[ Ultimate NAS & hosting platform ]=------------------=|
|-------------------------------------------------------------------------|
|=----------------------=[ ZFS, CBSD, Nextcloud ]=-----------------------=|
+-------------------------------------------------------------------------+

--[ Table of contents

0 - Introduction
1 - Installation
2 - Networking
3 - RAID ZFS
	3.1 - dataset
	3.2 - snapshot zfs
4 - jail
	4.1 - RAID mounted to jail (nullfs)
5 - Nextcloud
	5.1 - ssl
	5.2 - apache
	5.3 - httpd
	5.4 - php
	5.5 - redis
	5.6 - mysql
	5.7 - CLI installation and configuration of Nextcloud
6 - bhyve
	6.1 - WIP : Custom MicroOS - pb iso et cloud-init 
	6.2 - Test : default alpine - pb iso
	6.3 - ubuntu-cloud-init
		6.3.1 - docker
		6.3.2 - docker-compose
		6.3.3 - haproxy
7 - packet filtering

--[ 0 - Introduction

HardenedBSD NAS & hosting platform.
	* NAS sous zfs pour self-healing, RAID (volume manager) et backup (snapshot) automatisées par zfsnap
	* CBSD pour gestion des jail et vm bhyve
	* nextcloud (avec clamav) sous jail pour isolation et recovery
	* vm ubuntu cloud-init sous bhyve pour stack docker SearXNG+gluetun
	
Hardware
	* Odroid h3
	
--[ 1 - Installation

=> system instable en STABLE (ld-elf.si.l: tainted process refusing to run binary /libexec/ld-elf.so.l, hbsd-update et jail)
	-> passage en CURRENT
		-> toujours tainted process mais pas de crash
		-> a eu un probleme de reboot (le shell ne repond plus, ne reboot pas)

# pas de driver out of the box pour les int
https://www.eyegog.co.uk/posts/odroidh3-freebsd-firewall/

# fetch le driver et pkg
pkg fetch -d -o /root realtek-re-kmod pkg

# sur le system offline :
env SIGNATURE_TYPE=NONE pkg add pkg-1.21.2.pkg
pkg add <driver.pkg>

# ajouter a /boot/loader.conf pour charger le modules
if_re_load="YES"
if_re_name="/boot/modules/if_re.ko"

vi /etc/rc.conf
vi /etc/ssh/sshd_config
service sshd restart

# pour tous les systèmes :
ssh-keygen -t ed25519 -o -a 100
cat ~/.ssh/id_ed25519.pub > ~/.ssh/authorized_keys

--[ 2 - Networking

dans rc.conf
ifconfig_re0="inet 192.168.1.199/24"
ifconfig_re0_ipv6="inet6 prefix::local/lengh"
defaultrouter="192.168.1.254"
ipv6_defaultrouter="prefix::local"

vim /etc/resolv.conf 
nameserver 1.1.1.1
nameserver 2606:4700:4700::1111

ssh-keygen -t ed25519 -o -a 100
cat ~/.ssh/id_ed25519.pub > ~/.ssh/authorized_keys

--[ 3 - RAID ZFS

# ici un RAID1 (mirror pool)
zpool create raid mirror da1 da2
# pool automatiquement monter et accessible a /raid

----[ 3.1 - dataset

# un pool est juste la version volume manager de zfs les fichier que l'on 
# creer a l'interieur ne beneficie pas des capacités du fs (cow, checksum, snap...),
# il faut creer un dataset dans ce pool pour qu'elles s'y applique

zfs create raid/nas
# possible de compresser le dataset : zfs set compression=zstd pool/dataset
# par defaut zroot est sous lz4 : zfs get compression

----[ 3.2 - snapshot zfs du raid

# snapshot journalière
exemple : zfs snapshot storage/home@08-30-08
	storage = pool name, home = dirctory, @08-30-08=identifiant de la snapshot
pour tout les directory d'un pool :
	zfs snapshot -r zroot@snap (recursif dans le pool)

# on utilise zfsnap
# freebsd livbre la version 1 du logiciel

pkg install zfsnap
# on install zfsnap mais l'app est zfSnap (sensible a la casse)
zfSnap -a 30d -r raid/nas
# 30d = TTL

# on utilise destroy pour automatiquement viré les snap expirées
zfSnap -d

# liste les snapshot :
zfs list -t snapshot

# cron job
crontab -e 

--------------------------------------------------------------------------

SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
0	0	*	*	*	root	/usr/local/sbin/zfSnap -a 30d -r raid/nas
0	1	*	*	*	root	/usr/local/sbin/zfSnap -d

--------------------------------------------------------------------------

--[ 4 - jail
https://docs.freebsd.org/en/books/handbook/jails/

sysrc jail_enable="YES"
sysrc jail_parallel_start="YES"

pkg install cbsd
zfs create -o mountpoint=/jails -o atime=off zroot/jails
env workdir="/jails" /usr/local/cbsd/sudoexec/initenv

service cbsdd start

# avant de construire le jail besoin d'une userland a lui fournir
# les build/pkg/repo ne marchent pas, la telecharger auparavnt 
	-> en current ya aussi l'option populate (copier l'envir de l'hote => ne marche pas non plus)

fetch https://mirror.laylo.nl/pub/hardenedbsd/14-stable/amd64/amd64/installer/LATEST/base.txz
	-> current : fetch https://installers.hardenedbsd.org/pub/current/amd64/amd64/installer/LATEST/base.txz

cbsd jconstruct-tui
	-> network, mapper l'int de l'hote + ip

# assuming jailname = jail1
# list jail
cbsd jls
# start jail
cbsd jstart 
# Access a Jail
jexec -u root jail1
# reconfigurer une jail
cbsd jconfig jname=jail1

----[ 4.1 - raid jail nullfs

# mappage Nextcloud data directory
# hors jail :
mount -t nullfs /raid/nas/ /jails/jails/jail1/mnt
vim  /jails/jails-fstab/jail1/fstab.local
/raid/nas/ /mnt nullfs rw 0 0
mkdir /raid/nas/nextcloud
chown www:www /raid/nas/nextcloud

Nextcloud data directory : 
	hôte : /tank/data/nextcloud 
	jail : /mnt/nextcloud

--[ 5 - Nextcloud
https://github.com/theGeeBee/NextCloudOnFreeBSD/blob/release/install.sh

=> voir passage en latest des pkg
	-> pas defaut en current

# requirments
https://github.com/theGeeBee/NextCloudOnFreeBSD/blob/release/includes/requirements.txt

pkg install sudo git gnupg nano vim apache24 clamav ffmpeg mariadb106-server \
	redis php83 php83-bcmath php83-bz2 php83-ctype php83-curl php83-dom \
	php83-exif php83-fileinfo php83-filter php83-ftp php83-gd php83-gmp php83-iconv \
	php83-imap php83-intl php83-ldap php83-mbstring php83-opcache php83-pcntl php83-pdo \ 
	php83-pdo_mysql php83-pecl-APCu php83-pecl-imagick php83-pecl-redis php83-pecl-smbclient \
	php83-phar php83-posix php83-session php83-sodium php83-simplexml php83-sysvsem php83-xml \
	php83-xmlreader php83-xmlwriter php83-xsl php83-zip php83-zlib nextcloud-php83

# maj de clamav
freshclam

# services 

sysrc apache24_enable="YES"
sysrc mysql_enable="YES"
sysrc php_fpm_enable="YES"
sysrc redis_enable="YES"
sysrc clamav_clamd_enable="YES"
sysrc clamav_freshclam_enable="YES"
service redis start
apachectl start
service mysql-server start
service php-fpm start
service clamav-clamd onestart

# Update virus definitions again to report update to daemon
freshclam --quiet

----[ 5.1 - ssl

mkdir /etc/ssl/private
openssl genrsa -out /etc/ssl/private/server.key 4096
openssl req -new -key /etc/ssl/private/server.key \
  -out /etc/ssl/private/server.csr
openssl x509 -sha256 -req -days 365 \
  -in /etc/ssl/private/server.csr \
  -signkey /etc/ssl/private/server.key \
  -out /etc/ssl/server.crt

----[ 5.2 - apache

# apache vhost
mkdir /usr/local/etc/apache24/vhosts

cat << EOF > /usr/local/etc/apache24/vhosts/nextcloud.conf
<VirtualHost *:443>
  DocumentRoot /usr/local/www/nextcloud

  Protocols h2
  H2Direct on
  SSLEngine on
  SSLProtocol -all +TLSv1.3
  SSLCertificateFile /etc/ssl/server.crt
  SSLCertificateKeyFile /etc/ssl/private//server.key

  <Directory /usr/local/www/nextcloud>
    Require all granted
    AllowOverride All
    Options FollowSymLinks MultiViews
    <IfModule mod_dav.c>
      Dav off
    </IfModule>
    <IfModule mod_headers.c>
      Header always set Strict-Transport-Security "max-age=15552000; includeSubDomains"
    </IfModule>
  </Directory>
</VirtualHost>
EOF

----[ 5.3 - httpd

# httpd
https://github.com/theGeeBee/NextCloudOnFreeBSD/blob/release/includes/httpd.conf
# cp le contenu dans /usr/local/etc/apache24/httpd.conf
# virer SSL_OFF_
# supprimer la ligne ServerAdmin
# remplacer IP_ADDRESS et LISTEN_PORT

----[ 5.4 - php

# php.ini -> desactivation du jit
https://github.com/theGeeBee/NextCloudOnFreeBSD/blob/release/includes/php.ini
# cp le contenu dans /usr/local/etc/php.ini
pcre.jit=0
opcache.jit = 0
opcache.jit_buffer_size = 0

# php-fpm -> optimisation
vim /usr/local/etc/php-fpm.d/www.conf
pm.max_children = 120
pm.start_servers = 12
pm.min_spare_servers = 6
pm.max_spare_servers = 18

cat << EOF > /usr/local/etc/apache24/modules.d/030_php-fpm.conf
<IfModule proxy_fcgi_module>
    <IfModule dir_module>
        DirectoryIndex index.php
    </IfModule>
    <FilesMatch "\.(php|phtml|inc)$">
        SetHandler "proxy:fcgi://127.0.0.1:9000"
    </FilesMatch>
</IfModule>
EOF

----[ 5.5 - redis

# Add user `www` to group `redis`
pw usermod www -G redis

# redis -> passage en unixsocket
vim /usr/local/etc/redis.conf
port 0
unixsocket /var/run/redis/redis.sock
unixsocketperm 770

----[ 5.6 - mysql 

ajouter a la fin de /usr/local/etc/mysql/my.cnf :

--------------------------------------------------------------------------

[server]
innodb_buffer_pool_size=128M
innodb_flush_log_at_trx_commit=2
innodb_log_buffer_size=32M
innodb_max_dirty_pages_pct=90
innodb_use_native_aio=0
innodb_use_atomic_writes=0
query_cache_type=1
query_cache_limit=2M
query_cache_min_res_unit=2k
query_cache_size=64M
tmp_table_size=64M
max_heap_table_size=64M
slow_query_log=1
slow_query_log_file=/var/log/mysql/slow.log
long_query_time=1

[client]
default-character-set=utf8mb4

[mysqld]
character_set_server=utf8mb4
collation_server=utf8mb4_general_ci
transaction_isolation=READ-COMMITTED
binlog_format=ROW
innodb_large_prefix=on
innodb_file_format=barracuda
innodb_file_per_table=1
skip-innodb_doublewrite

--------------------------------------------------------------------------

apachectl restart
service php-fpm restart
service redis restart
service mysql-server restart

# Create Nextcloud log directory
mkdir -p /var/log/nextcloud/
chown www:www /var/log/nextcloud

# Create Nextcloud database

mariadb -u root -e "DELETE FROM mysql.user WHERE User='';"
mariadb -u root -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
mariadb -u root -e "DROP DATABASE IF EXISTS test;"
mariadb -u root -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
mariadb -u root -e "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"   			#nas
mariadb -u root -e "CREATE USER '${DB_USERNAME}'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"					#toto toto
mariadb -u root -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USERNAME}'@'127.0.0.1';"
mariadb -u root -e "FLUSH PRIVILEGES;"
mariadb-admin --user=root password "${DB_ROOT_PASSWORD}" reload

# ici le user ne peut se co que depuis 127.0.0.1
# ajouter des host avec mariadb -u root -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USERNAME}'@'IP ou HOSTNAME' IDENTIFIED BY '${DB_PASSWORD}';"

----[ 5.7 - CLI installation and configuration of Nextcloud
# en cas d'erreur "Cannot write into "config" directory!" passer en revu les config (apache,sql,php...) et redemarrer les services

chown -R www:www /usr/local/www/nextcloud
sudo -u www php "/usr/local/www/nextcloud/occ" maintenance:install --database="mysql" --database-name="${DB_NAME}" --database-user="${DB_USERNAME}" --database-pass="${DB_PASSWORD}" --database-host="127.0.0.1" --admin-user="${ADMIN_USERNAME}" --admin-pass="${ADMIN_PASSWORD}" --data-dir="/mnt/nextcloud"
sudo -u www php "/usr/local/www/nextcloud/occ" db:add-missing-primary-keys
sudo -u www php "/usr/local/www/nextcloud/occ" db:add-missing-indices
sudo -u www php "/usr/local/www/nextcloud/occ" db:add-missing-columns
sudo -u www php "/usr/local/www/nextcloud/occ" db:convert-filecache-bigint --no-interaction
sudo -u www php "/usr/local/www/nextcloud/occ" maintenance:mimetype:update-db
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set default_phone_region --value="${COUNTRY_CODE}"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set logtimezone --value="${TIME_ZONE}"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set logdateformat --value="Y-m-d H:i:s T"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set log_type --value="file"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set logfile --value="/var/log/nextcloud/nextcloud.log"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set loglevel --value="2"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set logrotate_size --value="104847600"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set filelocking.enabled --value=true
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set memcache.local --value="\OC\Memcache\APCu"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set redis host --value="/var/run/redis/redis.sock"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set redis port --value=0 --type=integer
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set memcache.distributed --value="\OC\Memcache\Redis"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set memcache.locking --value="\OC\Memcache\Redis"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set trusted_domains 0 --value="${IP_ADDRESS}"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set overwrite.cli.url --value="https://${IP_ADDRESS}"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set overwriteprotocol --value="https"
sudo -u www php "/usr/local/www/nextcloud/occ" config:system:set htaccess.RewriteBase --value="/"
sudo -u www php "/usr/local/www/nextcloud/occ" maintenance:update:htaccess
sudo -u www php "/usr/local/www/nextcloud/occ" app:disable contactsinteraction

# Install Antivirus for Files

sudo -u www php "/usr/local/www/nextcloud/occ" app:install files_antivirus
### set correct value for path on FreeBSD and set default action
sudo -u www php "/usr/local/www/nextcloud/occ" config:app:set files_antivirus av_mode --value="socket"
sudo -u www php "/usr/local/www/nextcloud/occ" config:app:set files_antivirus av_socket --value="/var/run/clamav/clamd.sock"
sudo -u www php "/usr/local/www/nextcloud/occ" config:app:set files_antivirus av_stream_max_length --value="104857600"
sudo -u www php "/usr/local/www/nextcloud/occ" config:app:set files_antivirus av_infected_action --value="only_log"
sudo -u www php "/usr/local/www/nextcloud/occ" config:app:set activity notify_notification_virus_detected --value="1"

# reste a paramétrer le cronjob (ou laisser l'ajax)

--[ 6 - bhyve

----[ 6.1 - WIP : MicroOS

crash course cbsd cloud-init :
telechargement du https://download.opensuse.org/tumbleweed/appliances/openSUSE-MicroOS.x86_64-ContainerHost-OpenStack-Cloud.qcow2 
convesion en raw qemu-img convert openSUSE-MicroOS.x86_64-ContainerHost-OpenStack-Cloud.qcow2 bsd-cloud-MicroOS.raw

microos-cloud.conf :
-> normalement download en xz et extract en raw
-> on peut passer le download et checksum (taille inutile) si fichier deja present dans /jails/src/iso (cbsd-cloud-***.raw)
-> du coup modification du nom de l'image dans le fichier pour skip 
-> pas besoin d'extration (remplacer la commande par wait)

--> va le reconvertir de /jails/src/iso/cbsd-cloud-MicroOS.raw a /dev/zvol/zroot/jails/cbsd-cloud-MicroOS.raw
--> clone de la cloud image vers le vm disk (en dd) stop a 99%
=> ctrl-c et démarre ?
	-> pb dracut 
	=> retour a l'iso
	
microos.conf :

a mettre dans /jails/etc

cbsd bconstruct-tui

To edit VM properties use: cbsd bconfig jname=MicrOS1
To start VM use: cbsd bstart MicrOS1
To stop VM use: cbsd bstop MicrOS1
To remove VM use: cbsd bremove MicrOS1
For attach VM console use: cbsd blogin MicrOS1

=> boot sur un memtest
--> wire ram ne marche pas

----[ 6.2 - denied : cbsd alpine

cbsd bconstruct-tui
	-> alpine extended
	
-> cette foit-si on a bien un media dans le bios mais plante quand-meme

----[ 6.3 - cbsd ubuntu-cloud-init

pkf install devel/git
-> mettre a jour les conf dispo

cbsd bconstruct-tui 
	-> ubuntu-cloud latest

# la flemme des bridge, le foutre sur re0 (comme la jail)

apt update
apt upgrade

# lock default user account

passwd -l ubuntu

------[ 6.3.1 - docker

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

apt update

apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose

------[ 6.3.2 - docker-compose

cat << EOF > docker-compose.yml
services:
  gluetun:
   image: qmcgaw/gluetun
   container_name: gluetun
   cap_add:
    - NET_ADMIN
   ports:
    - 127.0.0.1:80:8080/tcp # searxng
   environment:
    - VPN_SERVICE_PROVIDER=custom
    - VPN_TYPE=wireguard
    - VPN_ENDPOINT_IP=***
    - VPN_ENDPOINT_PORT=***
    - WIREGUARD_PUBLIC_KEY=***
    - WIREGUARD_PRIVATE_KEY=***
    - WIREGUARD_ADDRESSES=***
   restart: always

  searxng:
   image: searxng/searxng
   network_mode: "service:gluetun"
   container_name: searxng
   restart: always
EOF

# pas docker-compose mais docker compose
docker compose down -v (detruit les conteneur)
docker compose up -d (démarre les conteneurs)

systemctl enable docker

------[ 6.3.3 - haproxy

apk add haproxy

openssl genrsa -out /etc/ssl/private/server.key 4096
openssl req -new -key /etc/ssl/private/server.key \
  -out /etc/ssl/private/server.csr
openssl x509 -sha256 -req -days 365 \
  -in /etc/ssl/private/server.csr \
  -signkey /etc/ssl/private/server.key \
  -out /etc/ssl/server.crt
cat /etc/ssl/server.crt /etc/ssl/private/server.key > /etc/ssl/private/ssl-certs.pem

apt install haproxy

cat << EOF > /etc/haproxy/haproxy.cfg
frontend www
  bind :443 ssl crt /etc/ssl/private/ssl-certs.pem
  default_backend searxng

backend searxng
  mode http
  server searxng 127.0.0.1:80
EOF

systemctl enable haproxy
systemctl start haproxy

--[ 7 - packet filtering

cat << EOF > /etc/pf.conf
set block-policy drop
# match log (matches)
set skip on lo
block in on re0
pass out on re0
# necessaire ping6
pass in proto icmp6 from any to any
# admin
pass in proto tcp from 192.168.0.0/16 to port ssh
pass in proto icmp from 192.168.0.0/16
# services
pass in proto tcp from 192.168.0.0/16 to port https
# decommenter pour acces vnc
# pass in proto tcp from 192.168.0.0/16 to port 59000
EOF

# outils d'analyse
# 'match log (matches)' ne marche pas ici
tcpdump -neti pflog0 -> inspection et matching aux regles => No ALTQ support in kernel
pfctl -vvsr -> affiche les regles 
pfctl -f /etc/pf.conf -> recharge les regles
pfctl -d -> disable pf
pfctl -e -> enable pf

--[ 8 - updates

HardenedBSD : https://git.hardenedbsd.org/hardenedbsd/HardenedBSD/-/wikis/home#updating-hardenedbsd
	-> bioctl avant maj
	jail : https://git.hardenedbsd.org/hardenedbsd/HardenedBSD/-/wikis/home#updating-hardenedbsd
	ubutnu : apt
		conteneurs : reconstruire : docker-compose down -v (detruit les conteneur) docker-compose up -d (démarre les conteneurs)

+-[ EOF ]=----------------------------------------------------------------+
