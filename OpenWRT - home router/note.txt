+-------------------------------------------------------------------------+
|=----------------------=[ Ultimate Home Routeur ]=----------------------=|
|-------------------------------------------------------------------------|
|=---------------=[ WG, dnscrypt, hardware acceleration  ]=--------------=|
+-------------------------------------------------------------------------+

--[ Table of contents

0 - introduction
1 - installation
2 - irqbalance
3 - Hardware Flow Offloading
4 - Wireless Ethernet Dispatch
5 - Wifi
6 - recup ipv6
	6.1 - wan6
	6.2 - lan
	6.3 - Routage statique pour ipv6
7 - wireguard
8 - dnscrypt-proxy
8 - snort inline - WIP

--[ 0 - Introduction

Home routeur avec les fonctionnalités suivantes
	* WAN & LAN 2.5GBASE-T 	
	* WLAN 802.11ax (wifi 6)
	* DHCPv4 & v6
	* snort en inline (IPS)
	* server wireguard
	* hardware acceleration LAN et WLAN
	* irqbalance
	* dnscrypt-proxy avec redirection de port le forcer
	
Hardware
	* GL-MT6000
		* WAN 2.5Gbps
		* LAN 1 2.5Gbps 4 1Gbps


--[ 1 - Installation 

https://openwrt.org/toh/gl.inet/gl-mt6000
custom build utilise ici https://github.com/pesa1234/MT6000_cust_build/tree/main
flash le routeur avec l'image sysupgrade depuis l'interface web de l'OEM

pour l'install standard (pas le build cutsom) pas d'interface web, l'installer avec :
se co en ssh root@192.168.1.1 and: 
opkg update && opkg install luci luci-lib-px5g px5g-standalone

puis pour upgrader les co en http vers https :

uci set uhttpd.main.redirect_https=1     # 1 to enable redirect, 0 to disable redirect
uci commit uhttpd
service uhttpd reload

--[ 2 - irqbalance

déjà installer par l'image custom
a activer sous LuCI

--[ 3 - Hardware Flow Offloading
(attention : le flow offloading n'est pas compatible avec le Smart Queue Management (SQM) pour contrer les bufferbloat)

LuCI :
Network → Firewall → Software Flow Offloading: enable
Network → Firewall → Hardware Flow Offloading: enable
Save and Apply

--[ 4 - Wireless Ethernet Dispatch

par SSH pour l'image standard (pas dans LuCI): 

vim /etc/modules.conf
# append :
options mt7915e wed_enable=Y
	
Save and Reboot

apparaît sous LuCI avec l'image custom sous Network → Firewall → Routing/NAT Offloading

# vérification

cat /sys/module/mt7915e/parameters/wed_enable

--[ 5 - Wifi

Change wifi country code :

In LuCI go to Network → Wireless
Click “Edit” on the SSID you want to enable
Click “Advanced Settings” tab
Select your “Country Code” from the dropdown
Save and Apply

--[ 6 - recup ipv6
https://openwrt.org/fr/docs/guide-user/network/ipv6/freebox
https://blog.kulakowski.fr/post/openwrt-derriere-une-freebox-ipv6-dmz-et-bridge
https://lafibre.info/remplacer-freebox/freebox-delta-pop-mode-bridge-onpsense-freeplayer/
=> Même si le mode bridge est activé, la freebox reste un routeur IPv6, sur lequel il faudra configurer un NextOP (“le routeur suivant”) depuis son interface. 
-> cette adresse ipv6 n'est pas la default gateway a utilisé

----[ 6.1 - wan6

sur la freebox mettre en next-hop l'adresse de lien locale de l'interface wan6 d'openwrt (attention a ne pas se tomper d'eth)
sur OpenWRT mettre le prefix routé IPv6 (pas dispo sur l'interface web de base) :

uci delete network.wan6.ip6prefix
uci add_list network.wan6.ip6prefix='prefix::/64'
uci commit

l'interface wan6 n'a aucune ipv6 publique et aucune gateway, seule l'IPv6-PD est du coup remplie

----[ 6.2 - lan

Advanced Settingd :
	IPv6 assignment length : 64
	IPv6 prefix filter : wan6
	IPv6 suffix : suffix a donner a l'interace
DHCP server :
	Advanced settings :
		DHCP-Options : 6,192.168.1.1 -> dnscrypt-proxy
	IPv6 settings :
		RAd-Service : server mode
		DHCPv6-Service : server mode.
		Announced IPv6 DNS servers : vide -> se présente lui-même -> dnscrypt-proxy
		NDP-Proxy : disabled
	IPv6 RA Settings :
		default router : forced
	
aussi :
modifier les dns par défaut de wan pour ne pas rester sur ceux du FAI

----[ 6.3 - Routage statique pour ipv6

wan6 -> ::/0 -> adresse de lien locale freebox

=> routage static wan6 vers local link freebox

--[ 7 - wireguard
https://openwrt.org/docs/guide-user/services/vpn/wireguard/server

# pour l'image standard
## Preparation

Install the required packages. Specify configuration parameters for VPN server.

# Install packages
opkg update
opkg install wireguard-tools luci-proto-wireguard qrencode

# Configuration parameters
VPN_IF="vpn"
VPN_PORT="51820"
VPN_ADDR="192.168.9.1/24"
VPN_ADDR6="fd00:9::1/64"

## Key management

Generate and exchange keys between server and client.

# Generate keys
umask go=
wg genkey | tee wgserver.key | wg pubkey > wgserver.pub
wg genkey | tee wgclient.key | wg pubkey > wgclient.pub
wg genpsk > wgclient.psk

# Server private key
VPN_KEY="$(cat wgserver.key)"

# Pre-shared key
VPN_PSK="$(cat wgclient.psk)"

# Client public key
VPN_PUB="$(cat wgclient.pub)"

## Firewall

Consider VPN network as private. Assign VPN interface to LAN zone to minimize firewall setup. Allow access to VPN server from WAN zone.

# Configure firewall
uci rename firewall.@zone[0]="lan"
uci rename firewall.@zone[1]="wan"
uci del_list firewall.lan.network="${VPN_IF}"
uci add_list firewall.lan.network="${VPN_IF}"
uci -q delete firewall.wg
uci set firewall.wg="rule"
uci set firewall.wg.name="Allow-WireGuard"
uci set firewall.wg.src="wan"
uci set firewall.wg.dest_port="${VPN_PORT}"
uci set firewall.wg.proto="udp"
uci set firewall.wg.target="ACCEPT"
uci commit firewall
service firewall restart

## Network

Configure VPN interface and peers.

# Configure network
uci -q delete network.${VPN_IF}
uci set network.${VPN_IF}="interface"
uci set network.${VPN_IF}.proto="wireguard"
uci set network.${VPN_IF}.private_key="${VPN_KEY}"
uci set network.${VPN_IF}.listen_port="${VPN_PORT}"
uci add_list network.${VPN_IF}.addresses="${VPN_ADDR}"
uci add_list network.${VPN_IF}.addresses="${VPN_ADDR6}"

# Add VPN peers
uci -q delete network.wgclient
uci set network.wgclient="wireguard_${VPN_IF}"
uci set network.wgclient.public_key="${VPN_PUB}"
uci set network.wgclient.preshared_key="${VPN_PSK}"
uci add_list network.wgclient.allowed_ips="${VPN_ADDR%.*}.2/32"
uci add_list network.wgclient.allowed_ips="${VPN_ADDR6%:*}:2/128"
uci commit network
service network restart

# configuration

ajout des peer depuis l'int vpn sous LuCI (export de la config pour le client + qrcode dispo)
restart l'int apres modif

=> le custom build semble comprendre tout cela par defaut 

--[ 8 - DNScrypt-proxy

https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-on-OpenWrt

# install
opkg update
opkg install dnscrypt-proxy2
uci add_list dhcp.@dnsmasq[0].server='127.0.0.53'
uci commit dhcp
/etc/init.d/dnsmasq restart

# config, que doh pour l'ECH (ne marche pas sous odoh)
# edit /etc/dnscrypt-proxy2/dnscrypt-proxy.toml
------
...
listen_address = ['127.0.0.53:53']
...
ipv6_servers = true
dnscrypt_servers = false
doh_servers = true
odoh_servers = false
require_dnssec = true
... nolog, nofilter
------

# edit /etc/config/dhcp
config dnsmasq
    # Ignore ISP's DNS by not reading upstream servers from /etc/resolv.conf
    option noresolv '1'
    # Ensures that /etc/resolv.conf directs local system processes to use dnsmasq and hence dnscrypt-proxy
    option localuse '1'
    # Disable dnsmasq cache because we don't want to cache twice and the dnscrypt-proxy cache is superior
    option cachesize '0'

# verif /etc/config/network interface wan a option peerdns '0'

# redirection de port pour forcer tout le traffic dns vers dnscrypt-proxy
# add to /etc/config/firewall
config redirect
    option name 'Divert-DNS, port 53'
    option src 'lan'
    option dest 'lan'
    option src_dport '53'
    option dest_port '53'
    option target 'DNAT'

# test d'ECH :
https://defo.ie/ech-check.php
https://tls-ech.dev/

----------------------------- WIP -----------------------------

--[ 9 - snort inline - WIP : bloque pas, crash avec les community rules

https://openwrt.org/docs/guide-user/services/snort

opkg update
opkg install snort3 wget-ssl coreutils-sort

uci set snort.snort.enabled=1
uci set snort.snort.manual=0
uci set snort.snort.home_net="any"
uci set snort.snort.interface="$(uci get network.wan.device)"

# ips mode
uci set snort.snort.mode="ips"
uci set snort.snort.action="block"
(afpacket ?)
uci commit

# community rules
snort-rules
/etc/init.d/snort restart

# testing rules (logging icmp)
snort-rules --testing
/etc/init.d/snort restart

=> snort ne block rien en testing
=> not running avec les community rules, running en testing


+-[ EOF ]=----------------------------------------------------------------+

